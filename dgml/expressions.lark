?start: stmt+

?stmt: assignment
     | expr

assignment: IDENT "=" expr               -> assign

?expr: or_expr

?or_expr: and_expr
        | or_expr "or" and_expr           -> or_op

?and_expr: not_expr
         | and_expr "and" not_expr        -> and_op

?not_expr: comparison
         | "not" not_expr                 -> not_op

?comparison: arith_expr
           | arith_expr COMP_OP arith_expr -> compare


?arith_expr: term
           | arith_expr "+" term          -> add
           | arith_expr "-" term          -> sub

?term: factor
     | term "*" factor                   -> mul
     | term "/" factor                   -> div

?factor: atom

?atom: INT                               -> int_literal
     | FLOAT                             -> float_literal
     | STRING                            -> string_literal
     | BOOL                              -> bool_literal
     | "(" expr ")"                      -> paren
     | IDENT                              -> ident
     // FUNCTION CALL EXTENSION â€” uncomment when ready:
     // | IDENT "(" [expr ("," expr)*] ")"    -> func_call

// ----------- terminals -----------
INT: /[0-9]+/
FLOAT: /[0-9]+\.[0-9]+([eE][-+]?[0-9]+)?/
STRING: ESCAPED_STRING
IDENT: /[_a-zA-Z][_.a-zA-Z0-9]+/
BOOL.2: "true" | "false" // .2 for higher priority (over IDENT)
COMP_OP: "==" | "!=" | "<=" | "<" | ">=" | ">"

%import common.ESCAPED_STRING
%import common.WS_INLINE
%ignore WS_INLINE